{"version":3,"sources":["pages/01_Welcome.js","pages/02_WhatIsVirtualization.js","pages/03_WhatCanBeVirtualized.js","pages/03_Types/01_Emulation.js","pages/03_Types/02_Native.js","pages/03_Types/03_OS.js","pages/03_Types/04_Application.js","pages/04_History.js","pages/05_Advantages.js","pages/06_Thanks.js","pages/07_Resources.js","App.js","serviceWorker.js","index.js"],"names":["welcome","backgroundImage","backgroundOpacity","position","bottom","width","left","fontSize","what_is_virtualization","backgroundColor","what_can_be_virtualized","elementNum","emulation","native","OS","application","history","advantages","thanks","resources","theme","colors","primary","secondary","fonts","header","paragraph","fontSizes","template","justifyContent","padding","App","transitionEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc139b77.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Slide, Heading, Notes, FlexBox } from \"spectacle\";\r\n\r\nexport const welcome = (\r\n  <Slide\r\n    backgroundImage=\"url(https://miro.medium.com/max/1000/0*yS_K8Fo3A5WYAqQE)\"\r\n    backgroundOpacity={0.5}\r\n  >\r\n    <FlexBox position=\"absolute\" bottom={250} width={1}>\r\n      <Heading>Virtualizace</Heading>\r\n    </FlexBox>\r\n\r\n    <FlexBox position=\"absolute\" bottom={50} left={50}>\r\n      <Heading fontSize=\"200%\">Marek Sokol</Heading>\r\n    </FlexBox>\r\n\r\n    <Notes>\r\n      <p>Zdravím, vítám Vás u mé prezentace na téma virtualizace.</p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport { Slide, Heading, Notes, FlexBox } from \"spectacle\";\r\n\r\nexport const what_is_virtualization = (\r\n  <Slide backgroundColor=\"black\">\r\n    <FlexBox position=\"absolute\" bottom={250} width={1}>\r\n      <Heading>Definice</Heading>\r\n    </FlexBox>\r\n\r\n    <Notes>\r\n      <p>Nejprve si musíme vysvětlit co to virtualizace je.</p>\r\n      <p>\r\n        Pojem virtualizace je označení postupu, který nám umožňuje v počítači\r\n        přistupovat k dostupným zdrojům jiným způsobem, než jakým fyzicky\r\n        existují a jak jsou propojeny. Virtualizované prostředí může být mnohem\r\n        snáze přizpůsobeno potřebám uživatelů a lépe se používat, případně před\r\n        uživateli zakrývat pro ně nepodstatné technické detaily. Jinak řečeno -\r\n        zařízení je dostupné virtuálně ne fyzicky.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const what_can_be_virtualized = (\r\n  <Slide\r\n    backgroundImage=\"url(https://www.racksolutions.com/news//app/uploads/AdobeStock_90603827-2048x1152.jpeg)\"\r\n    backgroundOpacity={0.5}\r\n  >\r\n    <Heading>Přístupy k virtualizaci</Heading>\r\n\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Emulace</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Plná virtualizace</ListItem>\r\n      </Appear>\r\n\r\n      <Appear elementNum={2}>\r\n        <ListItem>Virtualizace na úrovni OS</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Aplikační virtualizace</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        Celkem existují čtyři různé typy virtualizace a to jsou emulace, plná\r\n        nebo také nativní virtualizace, virtualizace na úrovni operačního\r\n        systému a čistě aplikační virtualizace. Mezi těmito použitími jsou\r\n        markantní rozdíly v použítí, výkonu i vhodnosti. Tak si nyní všechny\r\n        jednotlivně projdeme.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const emulation = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Emulace</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Virtualizace hardware</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Nejuniverzálnější</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={2}>\r\n        <ListItem>Nejméně výkonné</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Ideální pro hraní her i vývoj a testování platforem</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        První je emulace. Virtuální stroj simuluje celý hardware, je tedy\r\n        nejuniverzálnější nebo-li hostitelské OS běží neupraveno na zcela\r\n        odlišném zařízení. Bohužel tohle má za následek snížený výkon.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const native = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Nativní virtualizace</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Nejběžnější virtualizace</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Procesor není emulován</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={2}>\r\n        <ListItem>Vše ostatní ano</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Například VirtualBox nebo VMware workstation</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        Druhým druhem je nativní virtualizace. Pro tento typ mezi výhody patří\r\n        možnosti startu systému bez úprav a minimalističnost, stačí x86\r\n        procesor, virtuální stroj totiž simuluje dostatečné množství hardware\r\n        aby umožnil oddělený běh neupraveného hosta určeného pro stejný druh\r\n        CPU. Mezi příklady patří především VirtualBox nebo VMware workstation.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const OS = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Virtualizace na úrovni OS</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>V podstatě nic nesimuluje</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Vše běží pod jedním jádrem</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={2}>\r\n        <ListItem>Lepší kontrola sdílení (= souborů, sítě atd.)</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Nejlepší výkon, ale nejméně možností</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={4}>\r\n        <ListItem>Tento systém využívá například Docker</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        Třetím typem je virtualizace na úrovni operačního systému. Ta vyžaduje\r\n        opravdu moderní procesory, jelikož se virtualizuje fyzický server na\r\n        úrovni operačního systému. To umožní aby na jednom zařízení fungovalo\r\n        více různých serverů. Díky tomu pak běží několiv hostovaných operačních\r\n        systémů spolu s jedním hostitelským operačním systémem. Nejlepším\r\n        příkladem za všechny je Docker.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const application = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Aplikační virtualizace</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Nevyžaduje podporu hostitele</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Bezproblémové nasazení</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={2}>\r\n        <ListItem>Velice dobrý výkon</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Například Java Virtual Machine</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        Čtvrtým typem je aplikační virtualizace. U této desktopové nebo\r\n        serverové aplikace běžící na daném stroji, používají místní zdroje, ale\r\n        běží ve zvláštním virtuálním stroji. To je rozdíl oproti tradičnímu\r\n        lokálnímu běhu nativních aplikací, tedy softwaru nainstalovaném přímo na\r\n        systému, taková aplikace běží v malém virtuálním prostředí obsahujícím\r\n        komponenty nutné ke spuštění – např. položky registrů, soubory, proměnné\r\n        prostředí, prvky uživatelského rozhraní a globální objekty. Toto\r\n        virtuální prostředí se chová jako vrstva mezi aplikací a operačním\r\n        systémem, která zabraňuje konfliktům mezi aplikací a OS nebo mezi\r\n        aplikacemi vzájemně. Toto využívá například Java Virtual Machine.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const history = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Historie</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Firma IBM v 60. letech 20 století</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>První počítač IBM 704</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        První pokusy s virtualizací přišly již v šedesátých letech dvacátého\r\n        století - firma IBM zkoušela u svých sálových počítačů. Virtualizace v\r\n        této době znamenala především hledání možností, jak ze systémů, které\r\n        byly schopné zpracovávat jen jeden úkol v jeden okamžik, vytvořit\r\n        vícevláknová zařízení, která by jednotlivé operace prokládala, a tím\r\n        lépe využívala možností tehdejšího hardwaru. Jedním z prvních strojů\r\n        využívající virtualizaci byl počítač IBM 704. Další vývoj v této oblasti\r\n        nastavil víceuživatelská prostředí jako jakýsi standard a virtualizace\r\n        se v těchto letech začala podobat tomu, jak ji známe dnes. Základem byl\r\n        dispečer nazývaný typicky virtual machine monitor, který měl přímý\r\n        přístup k fyzickým prostředkům počítače neboli hardwaru a následně\r\n        spravoval jednotlivé virtuální počítače. Dnes běžně nazýváme takovýto\r\n        systém jako hypervisor.\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Slide,\r\n  Heading,\r\n  UnorderedList,\r\n  Appear,\r\n  ListItem,\r\n  Notes,\r\n} from \"spectacle\";\r\n\r\nexport const advantages = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Výhody</Heading>\r\n    <UnorderedList>\r\n      <Appear elementNum={0}>\r\n        <ListItem>Plné využití výkonu = více služeb, méně serverů</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={1}>\r\n        <ListItem>Provoz více OS na jednom zařízení</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={2}>\r\n        <ListItem>Jednodušší zálohy</ListItem>\r\n      </Appear>\r\n      <Appear elementNum={3}>\r\n        <ListItem>Dynamické přidělování výkonu</ListItem>\r\n      </Appear>\r\n    </UnorderedList>\r\n\r\n    <Notes>\r\n      <p>\r\n        Mezi hlavní výhody virtulizace patří umožnění využití plného\r\n        hardwarového výkonu zařízení, díky tomu lze sloučit více služeb na méně\r\n        serverech. Dalšími výhodami je umožnění provozu více operačních systémů\r\n        na jednom fyzickém serveru nebo jednodušší zálohování a obnovu záloh.\r\n        Umožňuje také dynamické přidělování výkonu (jak navyšování i snižování).\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport { Slide, Heading, FlexBox, Notes } from \"spectacle\";\r\n\r\nexport const thanks = (\r\n  <Slide backgroundColor=\"black\">\r\n    <FlexBox position=\"absolute\" bottom={250} width={1}>\r\n      <Heading>Děkuji za pozornost</Heading>\r\n    </FlexBox>\r\n\r\n    <Notes>\r\n      <p>\r\n        A toto je konec mé prezentace. Děkuji za pozornost. Má někdo nějaké\r\n        dotazy...?\r\n      </p>\r\n    </Notes>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\r\nimport { Slide, Heading, Text } from \"spectacle\";\r\n\r\nexport const resources = (\r\n  <Slide backgroundColor=\"black\">\r\n    <Heading>Zdroje</Heading>\r\n    <Text fontSize=\"32px\">https://cs.wikipedia.org/wiki/Virtualizace</Text>\r\n    <Text fontSize=\"32px\">\r\n      https://www.petrkrcmar.cz/prednasky/Virtualizace_predevsim_linuxova_2011.pdf\r\n    </Text>\r\n    <Text fontSize=\"32px\">\r\n      https://www.interval.cz/clanky/virtualizace-mytus-kouzlo-hype-nebo-realita/\r\n    </Text>\r\n    <Text fontSize=\"32px\">\r\n      https://www.systemonline.cz/virtualizace/virtualizace-v-kostce.htm\r\n    </Text>\r\n  </Slide>\r\n);\r\n","import React from \"react\";\nimport { Deck, FlexBox, Box, FullScreen, Progress } from \"spectacle\";\nimport { welcome } from \"./pages/01_Welcome\";\nimport { what_is_virtualization } from \"./pages/02_WhatIsVirtualization\";\nimport { what_can_be_virtualized } from \"./pages/03_WhatCanBeVirtualized\";\nimport { emulation } from \"./pages/03_Types/01_Emulation\";\nimport { native } from \"./pages/03_Types/02_Native\";\nimport { OS } from \"./pages/03_Types/03_OS\";\nimport { application } from \"./pages/03_Types/04_Application\";\nimport { history } from \"./pages/04_History\";\nimport { advantages } from \"./pages/05_Advantages\";\nimport { thanks } from \"./pages/06_Thanks\";\nimport { resources } from \"./pages/07_Resources\";\n\n/*\nNotes are shown in presenter mode. Open up\nlocalhost:3000/?presenterMode=true to see them.\n*/\n\nconst theme = {\n  colors: {\n    primary: \"white\",\n    secondary: \"#41FF00\",\n  },\n  fonts: {\n    header: \"Montserrat\",\n    paragraph: \"Helvetica\",\n  },\n  fontSizes: {\n    header: \"64px\",\n    paragraph: \"28px\",\n  },\n};\n\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n      <Progress />\n    </Box>\n  </FlexBox>\n);\n\nconst App = () => {\n  return (\n    <Deck theme={theme} template={template} transitionEffect=\"fade\">\n      {welcome}\n      {what_is_virtualization}\n      {what_can_be_virtualized}\n      {emulation}\n      {native}\n      {OS}\n      {application}\n      {history}\n      {advantages}\n      {thanks}\n      {resources}\n    </Deck>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}